name: Test

# see: https://help.github.com/en/actions/reference/events-that-trigger-workflows
on:  # Trigger the workflow on push or pull request, but only for the master branch
  push:
    branches: [master, "release/*"]
  pull_request:
    branches: [master, "release/*"]
    types: [opened, reopened, ready_for_review, synchronize]

jobs:

  cpu:

    runs-on: ${{ matrix.os }}
    # if: github.event.pull_request.draft == false
    strategy:
      fail-fast: false
      matrix:
        os: [macOS-10.15]
        python-version: ["3.7", "3.9"]  # minimum, maximum
        requires: ["oldest", "latest"]
        release: ["stable"]
        #include:
          # nightly: add when there's a release candidate
          #- {os: ubuntu-20.04, python-version: "3.10", requires: "latest", release: "pre"}

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Weekly reset caching
      run: echo "::set-output name=period::$(python -c 'import time ; days = time.time() / 60 / 60 / 24 ; print(int(days / 7))' 2>&1)"
      id: times

    - name: Upgrade pip
      run: |
        python --version
        # needed for `pip cache` command
        pip install --upgrade pip --user
        pip --version

    # Github Actions: Run step on specific OS: https://stackoverflow.com/a/57948488/4521646
    - name: Setup macOS
      if: runner.os == 'macOS'
      run: |
        brew install openmpi libuv  # Horovod on macOS requires OpenMPI, Gloo not currently supported

    - name: Setup Windows
      if: runner.os == 'windows'
      run: |
        python .github/prune-packages.py requirements/extra.txt "horovod"

    - name: Set min. dependencies
      if: matrix.requires == 'oldest'
      run: |
        python .github/set-min-requirements.py

    # Note: This uses an internal pip API and may not always work
    # https://github.com/actions/cache/blob/master/examples.md#multiple-oss-in-a-workflow
    - name: Get pip cache dir
      id: pip-cache
      run: |
        echo "::set-output name=dir::$(pip cache dir)"

    - name: pip cache
      uses: actions/cache@v2
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: ${{ runner.os }}-pip-td${{ steps.times.outputs.period }}-py${{ matrix.python-version }}-${{ matrix.release }}-${{ matrix.requires }}-${{ hashFiles('requirements.txt') }}-${{ hashFiles('requirements/extra.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-td${{ steps.times.outputs.period }}-py${{ matrix.python-version }}-${{ matrix.release }}-${{ matrix.requires }}-

    - name: Install dependencies
      run: |
        flag=$(python -c "print('--pre' if '${{matrix.release}}' == 'pre' else '')" 2>&1)
        pip install --requirement requirements.txt --find-links https://download.pytorch.org/whl/cpu/torch_stable.html --upgrade $flag
        pip install --requirement requirements/test.txt --upgrade
        pip list
      shell: bash

    - name: Install extra dependencies
      env:
        HOROVOD_BUILD_ARCH_FLAGS: "-mfma"
        HOROVOD_WITHOUT_MXNET: 1
        HOROVOD_WITHOUT_TENSORFLOW: 1
      run: |
        # adjust versions according installed Torch version
        python ./requirements/adjust_versions.py requirements/extra.txt
        pip install --requirement ./requirements/extra.txt --find-links https://download.pytorch.org/whl/cpu/torch_stable.html --upgrade
        pip list
      shell: bash

    - name: Reinstall Horovod if necessary
      if: runner.os != 'windows'
      env:
        HOROVOD_BUILD_ARCH_FLAGS: "-mfma"
        HOROVOD_WITHOUT_MXNET: 1
        HOROVOD_WITHOUT_TENSORFLOW: 1
      run: |
        HOROVOD_BUILT=$(python -c "import horovod.torch; horovod.torch.nccl_built(); print('SUCCESS')" || true)
        if [[ $HOROVOD_BUILT != "SUCCESS" ]]; then
          pip uninstall -y horovod
          echo $(grep "horovod" requirements/extra.txt) > requirements/horovod.txt
          pip install --no-cache-dir -r requirements/horovod.txt
        fi
        horovodrun --check-build
      shell: bash

    - name: Tests
      timeout-minutes: 3
      run: |
        python -m pytest tests/core/test_lightning_module.py::test_sharded_tensor_state_dict tests/models/test_horovod.py::test_horovod_multi_optimizer -v

    - name: Setup tmate session
      if: failure()
      uses: mxschmitt/action-tmate@v3
